---
title: "R script - Caso de estudio Bellabeat"
author: "Jairo Andrés Amaya Muñoz"
date: "2023-02-17"
output: html_document
---
--------------------------------------------------------------------------------
PREPARACION --------------------------------------------------------------------
--------------------------------------------------------------------------------
Cargue de librerias

```{r setup, include=FALSE}
library(tidyverse)
library(lubridate)
library(plotly)
```

Dirección de los archivos y cargue de 4 grupos de archivos: 
actividad diaria (+ sueño), actividad por hora, peso y ritmo cardíaco.

```{r}
path_pc_local <- "C:/Users/JairoA/Documents/R_Studio_JAAM_Files/Capstone Project JAAM/Fitabase_Data_04122016-05122016"
path_pc_oficina <- "D:/RStudio/Fitabase Data 4.12.16-5.12.16"

activityday <- read_csv(file.path(path_pc_local, "dailyActivity_merged.csv"))
sleepday <- read_csv(file.path(path_pc_local, "sleepDay_merged.csv"))

calorieshour <- read_csv(file.path(path_pc_local, "hourlyCalories_merged.csv"))
stepshour <- read_csv(file.path(path_pc_local, "hourlySteps_merged.csv"))
intensitieshour <- read_csv(file.path(path_pc_local, "hourlyIntensities_merged.csv"))

weight <- read_csv(file.path(path_pc_local, "weightLogInfo_merged.csv"))

heartrate <- read_csv(file.path(path_pc_local, "heartrate_seconds_merged.csv"))
```

Revisamos que los archivos se hayan subido correctamente.

Revisamos la variable de Id para saber cuantos usuarios tenemos, también si hay valores NA y si hay registros duplicados.

```{r}
n_distinct(activityday$Id) ; n_distinct(sleepday$Id)
n_distinct(calorieshour$Id) ; n_distinct(stepshour$Id) ; n_distinct(intensitieshour$Id)
n_distinct(weight$Id) ; n_distinct(heartrate$Id)

sum(is.na(activityday)) ; sum(is.na(sleepday))
sum(is.na(calorieshour)) ; sum(is.na(stepshour)) ; sum(is.na(intensitieshour))
sum(is.na(weight)) ; sum(is.na(heartrate))

sum(duplicated(activityday)) ; sum(duplicated(sleepday))
sum(duplicated(calorieshour)) ; sum(duplicated(stepshour)) ; sum(duplicated(intensitieshour))
sum(duplicated(weight)) ; sum(duplicated(heartrate))
```

Vemos que tenemos registros de 33 usuarios para activityday, calorieshour, stepshour e intensitieshour. 
24 usuarios para sleepday, 8 para weight y 14 para heartrate. 
Si bien algunos archivos registran datos de menos usuarios, pueden llegar a darnos información útil.

Ademas, encontramos que weight tiene 65 NA y sleepday tiene 3 filas duplicadas.

Dejamos los NA ya que pertenecen a la columna Fat de weight y no afectan, y borramos los 3 duplicados de sleepday.

```{r}
glimpse(weight)
weight %>%
      filter(is.na(Fat))

sleepday <- distinct(sleepday)
sum(duplicated(sleepday))
```

Ahora, cambiamos las estampillas de tiempo que están en formato de texto a formato date o datetime.
Los diarios, el peso y el weight tendrán date y los por hora y el ritmo cardíaco tendrán datetime.

```{r}
activityday <- activityday %>%
  mutate(ActivityDate = date(mdy(ActivityDate))) %>%
  rename(date = ActivityDate)
sleepday <- sleepday %>%
  mutate(SleepDay = date(mdy_hms(SleepDay))) %>%
  rename(date = SleepDay)
weight <- weight %>%
  mutate(Date = date(mdy_hms(Date))) %>%
  rename(date = Date)

calorieshour <- calorieshour %>%
  mutate(ActivityHour = mdy_hms(ActivityHour)) %>%
  rename(datetime = ActivityHour)
stepshour <- stepshour %>%
  mutate(ActivityHour = mdy_hms(ActivityHour)) %>%
  rename(datetime = ActivityHour)
intensitieshour <- intensitieshour %>%
  mutate(ActivityHour = mdy_hms(ActivityHour)) %>%
  rename(datetime = ActivityHour)
heartrate <- heartrate %>%
  mutate(Time = mdy_hms(Time)) %>%
  rename(datetime = Time)
```

Las fechas están en un formato correcto para facilitar su uso mas adelante, también aprovechamos el Id en conjunto con la estampilla de tiempo como identificación única de cada registro.

Con esto podemos unir tablas de datos para facilitar el manejo. Quedaremos con activityday, incluida la información de sleepday, activityhour uniendo las 3 de actividad por hora y weight y heartrate.

```{r}
activityday <- activityday %>%
  left_join(sleepday, by=c("Id", "date"))

activityhour <- calorieshour %>%
  inner_join(stepshour, by=c("Id", "datetime")) %>%
  inner_join(intensitieshour, by=c("Id", "datetime"))
```

Añadiremos unas variables adicionales para ordenar los datos después:
semana y dia para activityday y semana, dia y hora para activityhour.

```{r}
activityday <- activityday %>%
  mutate(semana=isoweek(date), dia=wday(date, label=TRUE, abbr = FALSE, week_start = getOption("lubridate.week.start", 1))) %>%
  relocate(Id, date, semana, dia)

activityhour <- activityhour %>%
  mutate(semana=isoweek(datetime), dia=wday(datetime, label=TRUE, abbr = FALSE, week_start = getOption("lubridate.week.start", 1)), hora=hour(datetime)) %>%
  relocate(Id, datetime, semana, dia, hora)
```


Echamos un ultimo vistazo después de unidas y reordenadas para que los valores tengan rangos normales.  Deben estar ordenados, limpios y listos.

```{r}
glimpse(activityday)
summary(activityday)

glimpse(activityhour)
summary(activityhour)

glimpse(weight)
summary(weight)

glimpse(heartrate)
summary(heartrate)
```

Todos tienen rangos de valores que son posibles y no irreales. Por lo que las tablas a analizar están listas.

En este punto ya tenemos los datos listos y preparados.
Empezaremos realizando visualizaciones como:
 - Relación entre distancia y pasos, pasos y calorias y distancia y calorias.
 - Cuanto porcentaje del día se hace actividad y de que intensidad (piechart)
 - Cuales horas del días se hace mas actividad, puede ser por pasos o por calories o actividad (barras)
 - Calidad del sueño vs actividad por intensidades... (un poco difícil)
 - Días de mayor actividad en la semana



--------------------------------------------------------------------------------
PROCESAMIENTO Y ANALISIS -------------------------------------------------------
--------------------------------------------------------------------------------

Ahora empezamos a realizar gráficas que nos permitan dilucidar la información que contiene nuestros datos y que con esto podamos caracterizar a los usuarios de los dispositivos FitBit o de cualquier dispositivo de bio-monitoreo inteligente.


En primer lugar queremos ver la relación entre Calorias, Pasos dados y Distancia recorrida.

```{r}
ggplot(activityday, aes(x=TotalSteps, y=TotalDistance)) +
  geom_point() +
  geom_smooth() +
  labs(x = "Numero de Pasos", y = "Distancia Recorrida", title="Numero de Pasos vs Distancia Recorrida")

ggplot(data=activityday, aes(x=TotalSteps, y=Calories)) +
        geom_point(mapping=aes(color=TotalDistance)) +
        geom_smooth() +
        labs(x = "Numero de Pasos", y = "Calorias", color="Distancia Recorrida", title="Numero de Pasos vs Calorias")
```

Como es de esperarse a cuanto mas pasos mas distancia y mas calorías, van correlacionadas las tres variables, aunque midan cosas distintas, al final pueden indicar el nivel de actividad física de una persona.

Como es de esperarse a mas distancia, mas pasos dados, la correlación es muy directa.
Por lo anterior podemos estar seguros de que las distancias registradas son únicamente del desplazamiento hecho por los usuarios con sus propias piernas.

De igual forma vemos que la relación entre el numero de pasos y las calorías quemadas, es una correlación positiva pero con mas variabilidad, esto es porque no contamos con que tipo de actividad o en que actividad esta realizando el usuario. Como sabemos distintos niveles de actividad tienen impactos diferentes en mantener el estado físico y también tienen gastos energéticos distintos concentrados en el tiempo y en un numero de pasos mas reducido.



Queremos calcular cuanto porcentaje del día es dedicado a cada nivel de actividad, los niveles de actividad física son:
sedentary, lightly active, fairly active y very active.

Adicionalmente queremos discriminar el porcentaje de día dedicado al sueño, pero haremos unas comprobaciones porque el sueño proviene de otra tabla y tiene distinto numero de registros que los niveles de actividad.

Miramos cuanto da la sumatoria de los tiempos de nivel de actividad por día y por usuario.
```{r}
n_distinct(sleepday$Id)
n_distinct(sleepday$date)
#410 registros de sleepday (registros de 410 dias)

n_distinct(activityday$Id)
n_distinct(activityday$date)
#940 registros de activityday (registrso de 940 dias)

activityday %>%
  group_by(semana, dia, Id) %>%
  arrange(semana, dia) %>%
  mutate(horas_dia = sum(SedentaryMinutes, LightlyActiveMinutes, FairlyActiveMinutes, VeryActiveMinutes)/60) %>%
  ungroup() %>%
  summarize(Registros_24h = sum(horas_dia==24), Registros_20_a_24h = sum(horas_dia>20 & horas_dia<24), Registros_18_a_20h = sum(horas_dia>18 & horas_dia<20), Registros_16_18h = sum(horas_dia>16 & horas_dia<18), Registros_menos_16h = sum(horas_dia<16))


activityday %>%
  group_by(semana, dia, Id) %>%
  arrange(semana, dia) %>%
  mutate(horas_dia = sum(SedentaryMinutes, LightlyActiveMinutes, FairlyActiveMinutes, VeryActiveMinutes)/60) %>% 
  ggplot() +
  geom_freqpoly(aes(horas_dia))
#muestra los registros que son mayormente de las 24 horas
```
Efectivamente, se cuenta con menos registros del sueño pero son suficientes para hacernos a una idea del sueño promedio de los usuarios. 
De modo distinto, los niveles de actividad se miden y son excluyentes los unos de los otros, la mayoría de ellos por día e Id son suman 24 horas. Cuando la suma es un poco menor, debe ser porque el dispositivo esa apagado.
Lo anterior nos da a entender que en el tiempo sedentary esta incluido el tiempo de sueño, por esta razón restaremos el tiempo de sueño promedio, como porcentaje del día,
si el dispositivo inteligente esta apagado, pero esto nos da a entender que en el tiempo sedentary, se incluye el tiempo de sueño. Por esta razón restaremos el tiempo dormido a la actividad diaria en sedentario.


```{r}
#Minutos de sueño promedio por registro
horas_sueño_promedio <- sum(sleepday$TotalMinutesAsleep) / 410 / 60 #6.98622 horas de sueño en promedio

minutos_totales <- sum(activityday$SedentaryMinutes, activityday$LightlyActiveMinutes, activityday$FairlyActiveMinutes, activityday$VeryActiveMinutes)

#6.98622 horas de sueño promedio, serian 29.10925
porcentaje_sedentary_sleep <- horas_sueño_promedio / 24 * 100

porcentaje_sedentary <- ((sum(activityday$SedentaryMinutes) / minutos_totales)*100) - porcentaje_sedentary_sleep
porcentaje_lightly <- (sum(activityday$LightlyActiveMinutes) / minutos_totales) * 100
porcentaje_fairly <- (sum(activityday$FairlyActiveMinutes) / minutos_totales) * 100
porcentaje_veryactive <- (sum(activityday$VeryActiveMinutes) / minutos_totales) * 100

```


Con estos porcentajes calculados, podemos hacer un gráfico de torta.

```{r}
porcentajes_pie <- tibble(
  Group=factor(c("Sedentary(Sleep)", "Sedentary","Lightly active","Fairly active", "Very active")),
  Percentages=c(porcentaje_sedentary_sleep, porcentaje_sedentary, porcentaje_lightly, porcentaje_fairly, porcentaje_veryactive))

colors <- c("#398EE3", "#3674E0","#FF9612", "#84D564", "#FC4539")

plot_ly(porcentajes_pie, labels = ~Group, values = ~Percentages, 
        type = 'pie', sort = FALSE, marker=list(colors=colors), 
        textposition = 'outside',textinfo = 'label+percent') %>% 
  layout(title = '<b> Tiempo diario de Nivel de Actividad <b>', 
         xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
         yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
```
Podemos ver que la mayor parte del tiempo la pasamos sedentariamente, 19 horas y media. Dentro de este tiempo, casi 7 horas son de sueño, tiempo que se debe respetar y es sano.
3,8 horas de actividad ligera, 15 minutos en buen nivel de actividad y 25 minutos de actividad intensa.

Si bien el tiempo sedentario parece demasiado, los estilos de vida modernos tienen exigencias que nos hacen permanecer mucho tiempo quietos. Pero tal como hemos visto en las recomendaciones actuales dicen que realizar 150 minutos a la semana de actividad moderada o 75 minutos a la semana de actividad vigorosa, son suficientes para mantenernos en forma.
En cuanto a la actividad vigorosa, este gráfico nos indica que si logran cumplir con la cifra.



Ahora veremos la actividad a lo largo del día

```{r}
activityhour %>%
    group_by(hora) %>%
    summarize(Intensidad_de_actividad = mean(TotalIntensity)) %>%
    ggplot(aes(x=hora, y=Intensidad_de_actividad, fill=Intensidad_de_actividad)) +
        geom_col() +
        scale_fill_gradient(low = "steelblue4", high = "darkolivegreen2") +
        labs(x = "Hora del día", y = "Intensidad de Actividad", title="Intensidad de Actividad por hora del día")
```
Vemos que los usuarios realizan mas actividad física entre las 5 y las 7 pm, esta puede ser la hora en que terminan sus jornadas laborales. Podemos pensar que estos patrones se extienden al resto de la poblacion y podrian tambien variar el fin de semana. De lo que nos puede servir es de que podemos impulsar a las personas a aprovechar su tiempo al máximo, recomendando actividades que suplan la demanda de ejercicio en un menor tiempo, lo que implica ejercicio mas vigoroso pero provechoso para la persona.



Ahora miraremos como varia la actividad de acuerdo al día de la semana


```{r}
activityday %>% 
    group_by(semana, dia) %>%
    summarize(mean_calories = mean(Calories)) %>%
    ggplot(mapping=aes(x=dia, y=semana, fill=mean_calories)) +
    geom_tile() + 
    geom_text(aes(label=round(mean_calories)), color="white") +
    scale_fill_gradient(low = "steelblue", high = "mediumseagreen") +
    labs(x = "Dia de la semana", y = "Semana del año", title="Quema de Calorias promedio por dia")

activityday %>% 
    group_by(semana, dia) %>%
    summarize(mean_steps = mean(TotalSteps)) %>%
    ggplot(mapping=aes(x=dia, y=semana, fill=mean_steps)) +
    geom_tile() + 
    geom_text(aes(label=round(mean_steps, 1)), color="white") +
    scale_fill_gradient(low = "steelblue", high = "mediumseagreen") +
    labs(x = "Dia de la semana", y = "Semana del año", title="Numero de pasos promedio por dia")

activityhour %>% 
    group_by(dia) %>%
    summarize(mean_calories = mean(Calories)) %>%
    ggplot(mapping=aes(x=dia, y="", fill=mean_calories)) +
    geom_tile() + 
    geom_text(aes(label=round(mean_calories, 1)), color="white") +
    scale_fill_gradient(low = "steelblue", high = "mediumseagreen") +
    labs(x = "Dia de la semana", y = "", title="Calorias quemadas promedio diaria")

activityday %>%
  group_by(dia) %>%
  filter((sum(activityday$SedentaryMinutes, activityday$LightlyActiveMinutes, activityday$FairlyActiveMinutes, activityday$VeryActiveMinutes)/60) > 18, Calories > 1500, Calories < 3500) %>%
  ggplot(aes(x=dia, y=Calories)) +
  geom_boxplot(alpha=3/5, fill="mediumseagreen")

mean_calories_day <- activityday %>% group_by(dia) %>% summarize(round(mean(Calories),1))

activityday %>%
  group_by(dia) %>%
  ggplot(aes(x=dia, y=Calories)) +
  geom_boxplot(alpha=3/5, fill="mediumseagreen") +
  coord_cartesian(ylim=c(1650,2850)) +
  labs(x = "Dia de la semana", y = "Calorias", title="Calorias promedio por dia de la semana") +
  annotate("text", x="lunes", y=2230, label=mean_calories_day[1,2],     color="black", size=3) +
  annotate("text", x="martes", y=2275,   label=mean_calories_day[2,2],   color="black", size=3) +
  annotate("text", x="miércoles", y=2190, label=mean_calories_day[3,2],       color="black", size=3) +
  annotate("text", x="jueves", y=2120, label=mean_calories_day[4,2], color="black", size=3) +
  annotate("text", x="viernes", y=2250, label=mean_calories_day[5,2], color="black", size=3) +
  annotate("text", x="sábado", y=2180, label=mean_calories_day[6,2], color="black", size=3) +
  annotate("text", x="domingo", y=2120, label=mean_calories_day[7,2], color="black", size=3)

```

Despues de esto, pueedo usar los graficos como el de abajo, uno de calorias y otro de pasos para mostrar que tanto los graficos de tiles de arriba, representan a la totalidad de los usuarios. Y asi saber si hay quienes deben mejorar sus niveles de actividad y si hay quienes son muy activos, con esto damos recomendaciones finales respecto a los niveles de actividad. Solo queda mirar el sueño y si es posible el heartrate y peso...... edfasdghasdfg
dfgashfgk
asdguhgkjdf
ahsdfgh

USAR COLORES, PARA PASOS Y PARA CALORIAS. QUIZAS INTENSIDAD DE ACTIVIDAD.

Ahora analizaremos la relacion entre 


```{r}
active_minutes_vs_calories <- ggplot(data = activityday) + 
  geom_point(aes(x=Calories, y=SedentaryMinutes), color = "mediumseagreen", alpha = 1/4) +
  geom_smooth(method = loess,formula =y ~ x,aes(x=Calories, y=SedentaryMinutes), color = "mediumseagreen", se = FALSE) + 
  
  geom_point(aes(x=Calories, y=LightlyActiveMinutes), color = "orangered3", alpha = 1/4) +
  geom_smooth(method = loess,formula =y ~ x,aes(x=Calories, y=LightlyActiveMinutes, color=LightlyActiveMinutes), color = "orangered3", se = FALSE) + 
  
  geom_point(aes(x=Calories, y=FairlyActiveMinutes), color = "purple3", alpha = 1/4) +
  geom_smooth(method = loess,formula =y ~ x, aes(x=Calories, y=FairlyActiveMinutes), color = "purple3", se = FALSE) +
  
  geom_point(aes(x=Calories, y=VeryActiveMinutes), color = "turquoise1", alpha = 1/4) +
  geom_smooth(method = loess,formula =y ~ x,aes(x=Calories, y=VeryActiveMinutes), color = "turquoise1", se = FALSE) +
  
  labs(x = "Calorias", y = "Minutos de Actividad", title="Calorias vs Minutos de Actividad") +
  
  annotate("text", x=4800, y=160, label="Very Active",     color="black", size=3) +
  annotate("text", x=4800, y=0,   label="Fairly Active",   color="black", size=3) +
  annotate("text", x=4800, y=500, label="Sedentary",       color="black", size=3) +
  annotate("text", x=4800, y=250, label="Lightly  Active", color="black", size=3)

active_minutes_vs_calories

active_minutes_vs_steps <- ggplot(data = activityday) + 
  geom_point(aes(x=TotalSteps, y=SedentaryMinutes), color = "mediumseagreen", alpha = 1/4) +
  geom_smooth(method = loess,formula =y ~ x,aes(x=TotalSteps, y=SedentaryMinutes), color = "mediumseagreen", se = FALSE) + 
  
  geom_point(aes(x=TotalSteps, y=LightlyActiveMinutes), color = "orangered3", alpha = 1/4) +
  geom_smooth(method = loess,formula =y ~ x,aes(x=TotalSteps, y=LightlyActiveMinutes, color=LightlyActiveMinutes), color = "orangered3", se = FALSE) + 
  
  geom_point(aes(x=TotalSteps, y=FairlyActiveMinutes), color = "purple3", alpha = 1/4) +
  geom_smooth(method = loess,formula =y ~ x, aes(x=TotalSteps, y=FairlyActiveMinutes), color = "purple3", se = FALSE) +
  
  geom_point(aes(x=TotalSteps, y=VeryActiveMinutes), color = "turquoise1", alpha = 1/4) +
  geom_smooth(method = loess,formula =y ~ x,aes(x=TotalSteps, y=VeryActiveMinutes), color = "turquoise1", se = FALSE) +
  
  labs(x = "Pasos", y = "Minutos de Actividad", title="Calorias vs Minutos de Actividad") +
  
  annotate("text", x=35000, y=130, label="Very Active",     color="black", size=3) +
  annotate("text", x=35000, y=0,   label="Fairly Active",   color="black", size=3) +
  annotate("text", x=35000, y=1030, label="Sedentary",       color="black", size=3) +
  annotate("text", x=35000, y=230, label="Lightly  Active", color="black", size=3)

active_minutes_vs_steps
```

... ... ... .. .

```{r}

activityhour %>% group_by(Id, date(datetime)) %>% summarize(sum(TotalIntensity)/60)

```
hola 14/marzo
